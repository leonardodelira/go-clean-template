// Code generated by MockGen. DO NOT EDIT.
// Source: ./gatway.go
//
// Generated by this command:
//
//	mockgen -source=./gatway.go -package=mockups -destination=../../../mocks/mockups/gateway/gateway.go
//

// Package mockups is a generated GoMock package.
package mockups

import (
	context "context"
	domain "leonardodelira/go-clean-template/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTranslatorGateway is a mock of TranslatorGateway interface.
type MockTranslatorGateway struct {
	ctrl     *gomock.Controller
	recorder *MockTranslatorGatewayMockRecorder
}

// MockTranslatorGatewayMockRecorder is the mock recorder for MockTranslatorGateway.
type MockTranslatorGatewayMockRecorder struct {
	mock *MockTranslatorGateway
}

// NewMockTranslatorGateway creates a new mock instance.
func NewMockTranslatorGateway(ctrl *gomock.Controller) *MockTranslatorGateway {
	mock := &MockTranslatorGateway{ctrl: ctrl}
	mock.recorder = &MockTranslatorGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslatorGateway) EXPECT() *MockTranslatorGatewayMockRecorder {
	return m.recorder
}

// Translate mocks base method.
func (m *MockTranslatorGateway) Translate(ctx context.Context, text, target_lang string) (*domain.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", ctx, text, target_lang)
	ret0, _ := ret[0].(*domain.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockTranslatorGatewayMockRecorder) Translate(ctx, text, target_lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockTranslatorGateway)(nil).Translate), ctx, text, target_lang)
}
